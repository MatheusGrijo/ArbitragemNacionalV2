<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CuttingEdge.Conditions</name>
    </assembly>
    <members>
        <member name="T:CuttingEdge.Conditions.RequiresValidator`1">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="T:CuttingEdge.Conditions.ConditionValidator`1">
             <summary>
             Enables validation of pre- and postconditions. This class isn't used directly by developers. Instead 
             the class should be created by the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0)">Requires</see> and
             <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0)">Ensures</see> extension methods.
             </summary>
             <typeparam name="T">The type of the argument to be validated</typeparam>
             <example>
             The following example shows how to use <b>CuttingEdge.Conditions</b>.
             <code><![CDATA[
             using System.Collections;
             
             using CuttingEdge.Conditions;
             
             public class ExampleClass
             {
                 private enum StateType { Uninitialized = 0, Initialized };
                 
                 private StateType currentState;
             
                 public ICollection GetData(int? id, string xml, IEnumerable col)
                 {
                     // Check all preconditions:
                     Condition.Requires(id, "id")
                         .IsNotNull()          // throws ArgumentNullException on failure
                         .IsInRange(1, 999)    // ArgumentOutOfRangeException on failure
                         .IsNotEqualTo(128);   // throws ArgumentException on failure
             
                     Condition.Requires(xml, "xml")
                         .StartsWith("<data>") // throws ArgumentException on failure
                         .EndsWith("</data>"); // throws ArgumentException on failure
             
                     Condition.Requires(col, "col")
                         .IsNotNull()          // throws ArgumentNullException on failure
                         .IsEmpty();           // throws ArgumentException on failure
             
                     // Do some work
             
                     // Example: Call a method that should return a not null ICollection
                     object result = BuildResults(xml, col);
             
                     // Check all postconditions:
                     // A PostconditionException will be thrown at failure.
                     Condition.Ensures(result, "result")
                         .IsNotNull()
                         .IsOfType(typeof(ICollection));
             
                     return result as ICollection;
                 }
             }
             ]]></code>
             The following code examples shows how to extend the library with your own 'Invariant' entry point
             method. The first example shows a class with an Add method that validates the class state (the
             class invariants) before adding the <b>Person</b> object to the internal array and that code should
             throw an <see cref="T:System.InvalidOperationException"/>.
             <code><![CDATA[
             using CuttingEdge.Conditions;
             
             public class Person { }
             
             public class PersonCollection 
             {
                 public PersonCollection(int capicity)
                 {
                     this.Capacity = capicity;
                 }
             
                 public void Add(Person person)
                 {
                     // Throws a ArgumentNullException when person == null
                     Condition.Requires(person, "person").IsNotNull();
                     
                     // Throws an InvalidOperationException on failure
                     Invariants.Invariant(this.Count, "Count").IsLessOrEqual(this.Capacity);
                     
                     this.AddInternal(person);
                 }
            
                 public int Count { get; private set; }
                 public int Capacity { get; private set; }
                 
                 private void AddInternal(Person person)
                 {
                     // some logic here
                 }
                 
                 public bool Contains(Person person)
                 {
                     // some logic here
                     return false;
                 }
             }
             ]]></code>
             The following code example will show the implementation of the <b>Invariants</b> class.
             <code><![CDATA[
             using System;
             using CuttingEdge.Conditions;
             
             namespace MyCompanyRootNamespace
             {
                 public static class Invariants
                 {
                     public static ConditionValidator<T> Invariant<T>(T value)
                     {
                         return new InvariantValidator<T>("value", value);
                     }
             
                     public static ConditionValidator<T> Invariant<T>(T value, string argumentName)
                     {
                         return new InvariantValidator<T>(argumentName, value);
                     }
             
                     // Internal class that inherits from ConditionValidator<T>
                     sealed class InvariantValidator<T> : ConditionValidator<T>
                     {
                         public InvariantValidator(string argumentName, T value)
                             : base(argumentName, value)
                         {
                         }
             
                         protected override void ThrowExceptionCore(string condition,
                             string additionalMessage, ConstraintViolationType type)
                         {
                             string exceptionMessage = string.Format("Invariant '{0}' failed.", condition);
             
                             if (!String.IsNullOrEmpty(additionalMessage))
                             {
                                 exceptionMessage += " " + additionalMessage;
                             }
             
                             // Optionally, the 'type' parameter can be used, but never throw an exception
                             // when the value of 'type' is unknown or unvalid.
                             throw new InvalidOperationException(exceptionMessage);
                         }
                     }
                 }
             }
             ]]></code>
             </example>
        </member>
        <member name="F:CuttingEdge.Conditions.ConditionValidator`1.Value">
            <summary>Gets the value of the argument.</summary>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.#ctor(System.String,`0)">
            <summary>Initializes a new instance of the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class.</summary>
            <param name="argumentName">The name of the argument to be validated</param>
            <param name="value">The value of the argument to be validated</param>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/>.
            </returns>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.ThrowException(System.String,System.String,CuttingEdge.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.ThrowException(System.String)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
        </member>
        <member name="M:CuttingEdge.Conditions.ConditionValidator`1.ThrowExceptionCore(System.String,System.String,CuttingEdge.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
            <remarks>
            Implement this method when deriving from <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/>.
            The implementation should at least build the exception message from the 
            <paramref name="condition"/> and optional <paramref name="additionalMessage"/>. Usage of the
            <paramref name="type"/> is completely optional, but the implementation should at least be flexible
            and be able to handle unknown <see cref="T:CuttingEdge.Conditions.ConstraintViolationType"/> values. Values may be added
            in future releases.
            </remarks>
            <example>
            For an example see the documentation for <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/>.
            </example>
        </member>
        <member name="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">
            <summary>Gets the name of the argument.</summary>
        </member>
        <member name="M:CuttingEdge.Conditions.RequiresValidator`1.ThrowExceptionCore(System.String,System.String,CuttingEdge.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:CuttingEdge.Conditions.ValidatorExtensions">
            <summary>
            Extension methods for <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/>.
            </summary>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNaN(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNaN(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNaN(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNaN(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNaN(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNaN(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNaN(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNaN(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNegativeInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotPositiveInfinity(CuttingEdge.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterThan(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterThan(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerThan(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerThan(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerOrEqual(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerOrEqual(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.HasLength(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.HasLength(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotHaveLength(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotHaveLength(CuttingEdge.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the length of <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNullOrEmpty(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNullOrEmpty(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNullOrEmpty(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNullOrEmpty(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEmpty(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEmpty(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEmpty(CuttingEdge.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEmpty(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.StartsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.StartsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.StartsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.StartsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotStartWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotStartWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotStartWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotStartWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.EndsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.EndsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.EndsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.EndsWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotEndWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotEndWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotEndWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotEndWith(CuttingEdge.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEmpty``1(CuttingEdge.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEmpty``1(CuttingEdge.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEmpty``1(CuttingEdge.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEmpty``1(CuttingEdge.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains``2(CuttingEdge.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains``2(CuttingEdge.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Contains``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain``2(CuttingEdge.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain``2(CuttingEdge.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContain``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAny``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAny``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAny``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAny``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAny``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAny``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAny``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAny``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAll``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAll``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAll``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.ContainsAll``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAll``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAll``2(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAll``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotContainAll``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.HasLength``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.HasLength``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotHaveLength``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.DoesNotHaveLength``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotShorterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotShorterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsShorterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLongerThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLongerThan``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLongerOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsOfType``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsOfType``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotOfType``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotOfType``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>      
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be <see cref="M:System.Linq.Expressions.Expression`1.Compile">compiled</see> on each
            call. Try using the other <see cref="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be <see cref="M:System.Linq.Expressions.Expression`1.Compile">compiled</see> on each
            call. Try using the other <see cref="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Boolean)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.Evaluate``1(CuttingEdge.Conditions.ConditionValidator{``0},System.Boolean,System.String)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNull``1(CuttingEdge.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNull``1(CuttingEdge.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNull``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNull``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNull``1(CuttingEdge.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNull``1(CuttingEdge.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNull``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotNull``1(CuttingEdge.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsInRange(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotInRange(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessThan(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotLessOrEqual(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsNotEqualTo(CuttingEdge.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsTrue(CuttingEdge.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsTrue(CuttingEdge.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsTrue(CuttingEdge.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsTrue(CuttingEdge.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsFalse(CuttingEdge.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsFalse(CuttingEdge.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsFalse(CuttingEdge.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:CuttingEdge.Conditions.ValidatorExtensions.IsFalse(CuttingEdge.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:CuttingEdge.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:CuttingEdge.Conditions.PostconditionException">Thrown when the <see cref="F:CuttingEdge.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="T:CuttingEdge.Conditions.EnsuresValidator`1">
            <summary>
            The EnsuresValidator can be used for postcondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="M:CuttingEdge.Conditions.EnsuresValidator`1.ThrowExceptionCore(System.String,System.String,CuttingEdge.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:CuttingEdge.Conditions.PostconditionException">
            <summary>
            The exception that is thrown when a method's postcondition is not valid.
            </summary>
        </member>
        <member name="M:CuttingEdge.Conditions.PostconditionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CuttingEdge.Conditions.PostconditionException"/> class.</summary>
        </member>
        <member name="M:CuttingEdge.Conditions.PostconditionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CuttingEdge.Conditions.PostconditionException"/> class with a
            specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CuttingEdge.Conditions.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:CuttingEdge.Conditions.PostconditionException"/> class.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CuttingEdge.Conditions.PostconditionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PostconditionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:CuttingEdge.Conditions.AlternativeExceptionHelper`1">
            <summary>
            Internal helper class to cache a <see cref="T:CuttingEdge.Conditions.AlternativeExceptionCondition"/> and 
            <see cref="T:System.Reflection.ConstructorInfo"/> instance per exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
        </member>
        <member name="T:CuttingEdge.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal">
            <summary>Allows creating validators for a specific exception type.</summary>
        </member>
        <member name="T:CuttingEdge.Conditions.AlternativeExceptionCondition">
            <summary>
            An instance of this type is returned from the 
            <see cref="M:CuttingEdge.Conditions.Condition.WithExceptionOnFailure``1"/> method overloads and allow you to specify
            the exception type that should be thrown on failure.
            </summary>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            
            public class Person
            {
                private int age;
                
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an InvalidOperationException when value is less than 0
                        Condition.WithExceptionOnFailure<InvalidOperationException>()
                            .Requires(value).IsGreaterOrEqual(0);
                            
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(x, "x").IsGreaterOrEqual(0);
                    
                    // Throws an InvalidOperationException when y is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(y, "y").IsGreaterOrEqual(0);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.Equals(System.Object)">
            <summary>Determines whether the specified System.Object is equal to the current System.Object.</summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:CuttingEdge.Conditions.AlternativeExceptionCondition"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:CuttingEdge.Conditions.AlternativeExceptionCondition"/>.
            </returns>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionCondition.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="M:CuttingEdge.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="T:CuttingEdge.Conditions.ConstraintViolationType">
            <summary>
            This enumeration is used to determine the type of exception the validator should throw.
            </summary>
        </member>
        <member name="F:CuttingEdge.Conditions.ConstraintViolationType.Default">
            <summary>Lets the Validator to throw the default exception for that instance.</summary>
        </member>
        <member name="F:CuttingEdge.Conditions.ConstraintViolationType.OutOfRangeViolation">
            <summary>
            Lets the Validator optionally throw an exception type appropriate for values that are out of range.
            </summary>
        </member>
        <member name="F:CuttingEdge.Conditions.ConstraintViolationType.InvalidEnumViolation">
            <summary>
            Lets the Validator optionally throw an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
        </member>
        <member name="T:CuttingEdge.Conditions.SR">
            <summary>
            String Resource helper class
            </summary>
        </member>
        <member name="T:CuttingEdge.Conditions.StringificationExtensions">
            <summary>
            An internal helper class with extension methods for converting an object to a string representation.
            </summary>
        </member>
        <member name="M:CuttingEdge.Conditions.StringificationExtensions.Stringify(System.Object)">
            <summary>
            Transforms an object into a string representation that can be used to represent it's value in an
            exception message. When the value is a null reference, the string "null" will be returned, when 
            the specified value is a string or a char, it will be surrounded with single quotes.
            </summary>
            <param name="value">The value to be transformed.</param>
            <returns>A string representation of the supplied <paramref name="value"/>.</returns>
        </member>
        <member name="T:CuttingEdge.Conditions.RequiresWithCustomExceptionValidator`2">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
            <typeparam name="TException">The exception type to throw in case of a failure.</typeparam>
        </member>
        <member name="T:CuttingEdge.Conditions.Throw">
            <summary>
            All throw logic is factored out of the public extension methods and put in this helper class. This 
            allows more methods to be a candidate for inlining by the JIT compiler.
            </summary>
        </member>
        <member name="T:CuttingEdge.Conditions.CollectionHelpers">
            <summary>
            Helper methods for the Collection validation methods of the <see cref="T:CuttingEdge.Conditions.ValidatorExtensions"/> methods.
            </summary>
        </member>
        <member name="T:CuttingEdge.Conditions.Condition">
            <summary>
            Entry point methods to start validating pre- and postconditions.
            </summary>
        </member>
        <member name="M:CuttingEdge.Conditions.Condition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            
            public class Person
            {
                private int age;
                
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an ArgumentOutOfRangeException when value is less than 0
                        Condition.Requires(value).IsGreaterOrEqual(0);
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:CuttingEdge.Conditions.Condition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an ArgumentOutOfRangeException when x is less than 0
                    Condition.Requires(x, "x").IsGreaterOrEqual(0);
                    
                    // Throws an ArgumentOutOfRangeException when y is less than 0
                    Condition.Requires(y, "y").IsGreaterOrEqual(0);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:CuttingEdge.Conditions.Condition.Ensures``1(``0)">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
            validate the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            For an example of the usage of <b>Ensures</b> see the <see cref="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)"/> 
            overload.
            </example>
        </member>
        <member name="M:CuttingEdge.Conditions.Condition.Ensures``1(``0,System.String)">
             <summary>
             Returns a new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
             validate the postconditions of the given object.
             </summary>
             <typeparam name="T">The type of the object to validate.</typeparam>
             <param name="value">The object to validate.</param>
             <param name="argumentName">The name of the argument to validate</param>
             <returns>A new <see cref="T:CuttingEdge.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
             <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
             <example>
             The following example shows a way to use the <b>Ensures</b> method. Shown is an 
             <b>IObjectBuilder</b> interface which contract states that the <b>BuildObject</b> method should 
             never return <b>null</b>. That contract, however, is not enforced by the compiler or the runtime.
             To allow this contract to be validated, the <b>ObjectBuilderValidator</b> class is a decorator for
             objects implementing the <b>IObjectBuilder</b> interface and it <i>ensures</i> that the given
             contract is fulfilled, by checking the return value of the called <b>BuildObject</b> of the 
             wrapped <b>IObjectBuilder</b>.
             <code><![CDATA[
             using CuttingEdge.Conditions;
             
             public interface IObjectBuilder
             {
                 /// <summary>Builds an object.</summary>
                 /// <returns>Returns a newly built object. Will not return null.</returns>
                 object BuildObject();
             }
             
             public class ObjectBuilderValidator : IObjectBuilder
             {
                 public object BuildObject()
                 {
                     object obj = wrappedObjectBuilder.BuildObject();
             
                     // When obj == null, a PostconditionException is thrown, with the following message:
                     // "Postcondition 'the value returned by IObjectBuilder.BuildObject() should not be null'
                     // failed."
                     Conditions.Ensures(obj, "the value returned by IObjectBuilder.BuildObject()")
                         .IsNotNull();
             
                     return obj;
                 }
             
                 private readonly IObjectBuilder wrappedObjectBuilder;
            
                 /// <summary>
                 /// Initializes a new instance of the <see cref="ObjectBuilderValidator"/> class.
                 /// </summary>
                 /// <param name="objectBuilder">The object builder.</param>
                 /// <exception cref="ArgumentNullException">
                 /// Thrown when <paramref name="objectBuilder"/> is a null reference.
                 /// </exception>
                 public ObjectBuilderWrapper(IObjectBuilder objectBuilder)
                 {
                     // Throws a ArgumentNullException when objectBuilder == null.
                     Condition.Requires(objectBuilder, "objectBuilder").IsNotNull();
             
                     this.wrappedObjectBuilder = objectBuilder;
                 }
             }
             ]]></code>
             See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
             </example>
        </member>
        <member name="M:CuttingEdge.Conditions.Condition.WithExceptionOnFailure``1">
            <summary>
            Returns a new <see cref="T:CuttingEdge.Conditions.AlternativeExceptionCondition"/> that allows you to specify the exception
            type that has to be thrown in case a a validation fails.
            </summary>
            <typeparam name="TException">The type of the exception to throw.</typeparam>
            <returns>A new <see cref="T:CuttingEdge.Conditions.AlternativeExceptionCondition"/>.</returns>
            <example>
            The following example shows how to use the <b>WithExceptionOnFailure</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>().Requires(x, "x")
                        .IsGreaterOrEqual(0)
                        .IsLessThan(100);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:CuttingEdge.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
            <exception cref="T:System.ArgumentException">
            Thrown when the supplied <typeparamref name="TException"/> is abstract or does not contain a
            public constructor with a single parameter of type <see cref="T:System.String"/>.</exception>
        </member>
        <member name="T:CuttingEdge.Conditions.DefaultComparer`1">
            <summary>
            By letting the methods of the ValidatorExtensions class call this static field, it saves us a call to 
            the Comparer{T}.get_Default() method.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
    </members>
</doc>
